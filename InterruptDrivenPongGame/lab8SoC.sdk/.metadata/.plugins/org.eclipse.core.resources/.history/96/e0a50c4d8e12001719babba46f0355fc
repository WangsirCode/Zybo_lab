//pingpong template file for ECE530 Lab #6
//Pingpong game by Keith Hoover
//Version 2 to use loops and arrays
//Revised by Jianjian Song to add pressing early penalty, 3-23-2016
#include "xparameters.h"
#include "xgpio.h"
#include "led_ip.h"
// Include scutimer header file
#include "XScuTimer.h"
//====================================================
XScuTimer Timer;		/* Cortex A9 SCU Private Timer Instance */
void delay(void);
void MoveBallRight(void);
void MoveBallLeft(void);

#define ONE_TENTH 32500000 // half of the CPU clock speed/10
#define START 1

#define STOP 0
#define LEFT 0
#define RIGHT 1
#define RESETBUTTON 0b0100
#define STARTBUTTON 0b0010
#define LEFTPADDLE 0b1000
#define RIGHTPADDLE 0b0001

int psb_check, dip_check, LedState, Status,count,dip_check_prev;
XGpio dip, push;
// PS Timer related definitions
XScuTimer_Config *ConfigPtr;
XScuTimer *TimerInstancePtr = &Timer;


int LED_PATTERNS[4]={0b1000, 0b0100, 0b0010,0b0001};
int scoreright, scoreleft;
char GameOver, StartDirection;
void initialize();
void setStatus();
void setTimer();
void setLED();
int main (void)
{
	//initialize variables, timers, ports
	initialize();

   xil_printf("-- Start of the Ping Pong Program --\r\n");
   GameOver=STOP;
   scoreright = 0; scoreleft = 0;
   xil_printf("Score Left = %d   Score Right = %d\r\n", scoreright, scoreleft);
   StartDirection=LEFT;
   while (1)
   {
	  // Read push buttons and reset score if Button 2 is pressed
	  psb_check = XGpio_DiscreteRead(&push, 1);
	  if(psb_check != 0)
	  {
		  setStatus();
	  }
	  dip_check = XGpio_DiscreteRead(&dip, 1);
	  if (dip_check != dip_check_prev) {
		  setTimer();
	  }
	  if(XScuTimer_IsExpired(TimerInstancePtr)) {
		  // clear status bit
		  XScuTimer_ClearInterruptStatus(TimerInstancePtr);
		  // output the count to LED and increment the count
		  setLED();
		  count++;
	  }
   }

} //main()
void setStatus()
{

}
void setTimer()
{
	xil_printf("DIP Switch Status %x, %x\r\n", dip_check_prev, dip_check);
	dip_check_prev = dip_check;
	// load timer with the new switch settings
	XScuTimer_LoadTimer(TimerInstancePtr, ONE_TENTH*dip_check);
	count = 0;
}
void setLED()
{

}
void initialize()
{
	   XGpio_Initialize(&dip, XPAR_SWITCHES_DEVICE_ID);
	   XGpio_SetDataDirection(&dip, 1, 0xffffffff);

	   XGpio_Initialize(&push, XPAR_BUTTONS_DEVICE_ID);
	   XGpio_SetDataDirection(&push, 1, 0xffffffff);

	   count = 0;

	   // Initialize the timer
	   ConfigPtr = XScuTimer_LookupConfig (XPAR_PS7_SCUTIMER_0_DEVICE_ID);
	   Status = XScuTimer_CfgInitialize	(TimerInstancePtr, ConfigPtr, ConfigPtr->BaseAddr);
	   if(Status != XST_SUCCESS){
		  xil_printf("Timer init() failed\r\n");
		  return XST_FAILURE;
	   }
	   // Read dip switch values
	   dip_check_prev = XGpio_DiscreteRead(&dip, 1);
	   // Load timer with delay in multiple of ONE_TENTH
	   XScuTimer_LoadTimer(TimerInstancePtr, ONE_TENTH*dip_check_prev);
	   // Set AutoLoad mode
	   XScuTimer_EnableAutoReload(TimerInstancePtr);
	   // Start the timer
	   XScuTimer_Start (TimerInstancePtr);
}
void MoveBallRight(void) {
char i, EarlyPress;
		EarlyPress=0;
//move LED to the right
// check for button pushes
//set StartDirection
//set GameOver; display scores
}

void MoveBallLeft(void) {
char i, EarlyPress;
	EarlyPress=0;
//move LED to the left
// check for button pushes
//set StartDirection
//set GameOver, update and display scores
}


void delay(void){
	  // Read dip switch values
	   dip_check = XGpio_DiscreteRead(&dip, 1);
	   // Load timer with delay in multiple of ONE_T
}
